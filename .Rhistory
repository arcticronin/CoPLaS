# Predict on test data
x_test <- X[test_indices,]
print(dim(x_test))
y_test = y[test_indices,]
print(dim(y_test))
predictions <- predict.prioritylasso(fit, newx = x_test, s = "lambda.min", type="response")
#add_intercept <- intercept_model_matrix %*% intercepts
print(dim(predictions))
#print(y[test_indices,])
# Calculate C-index for test data
c_index <- concordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
library(assert_logical)
install.packages(assert_logical)
install.packages("checkmate")
install.packages("checkmate")
library(checkmate) # assert_logical assert_numeric assert check_matrix check_data_frame
# start crossval and store C-Index
for(i in 1:5){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
#fit <- TODO aggiungi il fit qui
fit <- prioritylasso(Y= y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 5)
# Predict on test data
x_test <- X[test_indices,]
print(dim(x_test))
y_test = y[test_indices,]
print(dim(y_test))
predictions <- predict.prioritylasso(fit, newx = x_test, s = "lambda.min", type="response")
#add_intercept <- intercept_model_matrix %*% intercepts
print(dim(predictions))
#print(y[test_indices,])
# Calculate C-index for test data
c_index <- concordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
#######################################################################
#######################################################################
#######################################################################
#######################################################################
# survival
library(survival)
library(glmnet)
library(prioritylasso)
# plotting
library(ggplot2)
library(reshape2)
# confidence interval
library(dplyr)
library(tidyr)
library(checkmate) # assert_logical assert_numeric assert check_matrix check_data_frame
# start crossval and store C-Index
for(i in 1:5){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
#fit <- TODO aggiungi il fit qui
fit <- prioritylasso(Y= y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 5)
# Predict on test data
x_test <- X[test_indices,]
print(dim(x_test))
y_test = y[test_indices,]
print(dim(y_test))
predictions <- predict.prioritylasso(fit, newx = x_test, s = "lambda.min", type="response")
#add_intercept <- intercept_model_matrix %*% intercepts
print(dim(predictions))
#print(y[test_indices,])
# Calculate C-index for test data
c_index <- concordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
# start crossval and store C-Index
for(i in 1:5){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
#fit <- TODO aggiungi il fit qui
fit <- prioritylasso(Y= y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 5)
# Predict on test data
x_test <- X[test_indices,]
print(dim(x_test))
y_test = y[test_indices,]
print(dim(y_test))
#predictions <- predict.prioritylasso(fit, newx = x_test, s = "lambda.min", type="response")
predictions = exp(x_test %*% fit$coefficients) #+ add_intercept + imputed_values
print(dim(predictions))
#print(y[test_indices,])
# Calculate C-index for test data
c_index <- concordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
# Calculate average C-index
mean_c_index <- mean(cv_results$c_index)
mean_c_index
folds <- cut(seq(1, nrow(data)), breaks=10, labels=FALSE) # 5-fold CV
# Store results
cv_results <- data.frame(fold = integer(0), c_index = numeric(0))
# start crossval and store C-Index
for(i in 1:10){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
#fit <- TODO aggiungi il fit qui
fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
# Predict on test data
x_test <- X[test_indices,]
print(dim(x_test))
y_test = y[test_indices,]
print(dim(y_test))
#predictions <- predict.prioritylasso(fit, newx = x_test, s = "lambda.min", type="response")
predictions = exp(x_test %*% fit$coefficients) #+ add_intercept + imputed_values
print(dim(predictions))
#print(y[test_indices,])
# Calculate C-index for test data
c_index <- concordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
#fit <- TODO aggiungi il fit qui
#fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
fit4 <- coxph(Surv(y_train) ~ ., data=x_train)
#fit <- TODO aggiungi il fit qui
#fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
fit4 <- coxph(Surv(y_train) ~ ., data=train_data)
#fit <- TODO aggiungi il fit qui
#fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
fit4 <- coxph(Surv(y_train) ~ ., data=as.data.frame(train_data))
View(train_data)
View(train_data)
#fit <- TODO aggiungi il fit qui
#fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
tr_data = cbind(y_train, x_train)
#fit <- TODO aggiungi il fit qui
#fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
tr_data = cbind(y_train, x_train)
fit4 <- coxph(Surv(tr_data$time, tr_data$event) ~ ., data=as.data.frame(tr_data))
View(tr_data)
fit4 <- coxph(Surv(tr_data$time, tr_data$status) ~ ., data=as.data.frame(tr_data))
class(tr_data)
#fit <- TODO aggiungi il fit qui
#fit <- prioritylasso(Y = y_train, X = x_train, blocks = blocks, family = "cox", block1.penalization = TRUE, type.measure = "deviance",lambda.type = "lambda.min", nfolds = 10)
tr_data = as.data.frame(cbind(y_train, x_train))
class(tr_data)
fit4 <- coxph(Surv(tr_data$time, tr_data$status) ~ ., data=as.data.frame(tr_data))
View(indices)
library(survival)
library(glmnet)
library(prioritylasso)
# plotting
library(ggplot2)
library(reshape2)
# confidence interval
library(dplyr)
library(tidyr)
setwd("Dev/notebooks/thesis_notebook/DaniDatasets/")
setwd("~/Dev/CoPLaS/CoPLaS")
library(survival)
library(glmnet)
library(prioritylasso)
# plotting
library(ggplot2)
library(reshape2)
# confidence interval
library(dplyr)
library(tidyr)
data = read.csv("preprocessed.csv")
indices = read.csv("indices_for_preprocessed.csv")
#preproc, remove dependent var and iupdate indices
X <- as.matrix(data[, !(names(data) %in% c("time", "event", "X"))])  # Predictor matrix
y <- Surv(data$time, data$event)  # Response variable for survival analysis
indices$index[2:nrow(indices)] <- indices$index[2:nrow(indices)] - 2
blocks = list(bp1=1:2,
bp2=3:1999,
bp3=2000:2487,
bp4=2488:3188,
bp5=3189:5464,
bp6=5465:5587,
bp7=5588:7036,
bp8=7037:8376)
# Creare una lista per memorizzare le liste di indici
list_of_indices <- list()
set.seed(42)
folds <- cut(seq(1, nrow(data)), breaks=15, labels=FALSE) # 5-fold CV
cv_results <- data.frame(fold = integer(0), c_index = numeric(0))
# start crossval and store C-Index
for(i in 1:15){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
fit <- prioritylasso(Y = y_train,
X = x_train,
blocks = blocks,
family = "cox",
block1.penalization = TRUE,
type.measure = "deviance",
lambda.type = "lambda.min",
nfolds = 10)
# Predict on test data
x_test <- X[test_indices,]
y_test = y[test_indices,]
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 2)
)
# print(predictions)
# print(y[test_indices,])
# Calculate C-index for test data
# c_index <- concordance(y_test ~ predictions)$concordance
#c_index <- concordance(y_test, predictions)
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
folds <- cut(seq(1, nrow(data)), breaks=30, labels=FALSE) # 5-fold CV
# Store results
cv_results <- data.frame(fold = integer(0), c_index = numeric(0))
# start crossval and store C-Index
for(i in 1:30){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
fit <- prioritylasso(Y = y_train,
X = x_train,
blocks = blocks,
family = "cox",
block1.penalization = TRUE,
type.measure = "deviance",
lambda.type = "lambda.min",
nfolds = 10)
# Predict on test data
x_test <- X[test_indices,]
y_test = y[test_indices,]
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 2)
)
# print(predictions)
# print(y[test_indices,])
# Calculate C-index for test data
# c_index <- concordance(y_test ~ predictions)$concordance
#c_index <- concordance(y_test, predictions)
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results <- rbind(cv_results, data.frame(fold = i, c_index = c_index))
}
# survival
library(survival)
library(glmnet)
library(prioritylasso)
# plotting
library(ggplot2)
library(reshape2)
# confidence interval
library(dplyr)
library(tidyr)
#setwd("Dev/notebooks/thesis_notebook/DaniDatasets/")
data = read.csv("preprocessed.csv")
indices = read.csv("indices_for_preprocessed.csv")
#preproc, remove dependent var and iupdate indices
X <- as.matrix(data[, !(names(data) %in% c("time", "event", "X"))])  # Predictor matrix
y <- Surv(data$time, data$event)  # Response variable for survival analysis
indices$index[2:nrow(indices)] <- indices$index[2:nrow(indices)] - 2
blocks = list(bp1=1:2,
bp2=3:1999,
bp3=2000:2487,
bp4=2488:3188,
bp5=3189:5464,
bp6=5465:5587,
bp7=5588:7036,
bp8=7037:8376)
# Creare una lista per memorizzare le liste di indici
list_of_indices <- list()
set.seed(42)
folds <- cut(seq(1, nrow(data)), breaks=30, labels=FALSE) # 5-fold CV
# Store results
cv_results_1 <- data.frame(fold = integer(0), c_index = numeric(0))
cv_results_12 <- data.frame(fold = integer(0), c_index = numeric(0))
cv_results_13 <- data.frame(fold = integer(0), c_index = numeric(0))
cv_results_123 <- data.frame(fold = integer(0), c_index = numeric(0))
cv_results_1367 <- data.frame(fold = integer(0), c_index = numeric(0))
cv_results_13678 <- data.frame(fold = integer(0), c_index = numeric(0))
cv_results_3678 <- data.frame(fold = integer(0), c_index = numeric(0))
# start crossval and store C-Index
for(i in 1:30){
# Split data into training and test sets
test_indices <- which(folds == i)
train_indices <- which(folds != i)
train_data <- X[train_indices, ]
test_data <- X[test_indices, ]
# Fit model on training data
y_train = y[train_indices,]
x_train = X[train_indices,]
fit <- prioritylasso(Y = y_train,
X = x_train,
blocks = blocks,
family = "cox",
block1.penalization = TRUE,
type.measure = "deviance",
lambda.type = "lambda.min",
nfolds = 10)
# Predict on test data
x_test <- X[test_indices,]
y_test = y[test_indices,]
# 1
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_1 <- rbind(cv_results_1, data.frame(fold = i, c_index = c_index))
# 1 e 2
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 2))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_12 <- rbind(cv_results_12, data.frame(fold = i, c_index = c_index))
# 1 e 3
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 3))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_13 <- rbind(cv_results_13, data.frame(fold = i, c_index = c_index))
# 1 2 e 3
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 2, 3))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_123 <- rbind(cv_results_123, data.frame(fold = i, c_index = c_index))
# 1 3 6 7
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 3, 6, 7))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_1367 <- rbind(cv_results_1367, data.frame(fold = i, c_index = c_index))
# 1 3 6 7 8
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(1, 3, 6, 7, 8))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_13678 <- rbind(cv_results_13678, data.frame(fold = i, c_index = c_index))
# 3 6 7 8
predictions <- predict(
object = fit,
newdata = x_test,
type = "response",
use.blocks = c(3, 6, 7, 8))
c_index <- survConcordance(y_test ~ predictions)$concordance
# Save results
cv_results_3678 <- rbind(cv_results_3678, data.frame(fold = i, c_index = c_index))
}
View(cv_results_1)
View(cv_results_1)
View(cv_results_12)
View(cv_results_12)
# Calculate average C-index
mean_c_index <- mean(cv_results_1$c_index)
print(mean_c_index)
# Calculate average C-index
mean_c_index <- mean(cv_results_12$c_index)
print(mean_c_index)
# Calculate average C-index
mean_c_index <- mean(cv_results_13$c_index)
print(mean_c_index)
# Calculate average C-index
mean_c_index <- mean(cv_results_12$c_index)
print(mean_c_index)
# Calculate average C-index
cv_res <- cv_results_1[complete.cases(cv_results_1), ]
# Rimuovere righe dove un valore è zero
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
#my_list <- cv_results_1[!sapply(cv_results_1$c_index, is.nan) & !cv_results_1$c_index)]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index)
# Calculate average C-index
cv_res <- cv_results_12[complete.cases(cv_results_12), ]
# Rimuovere righe dove un valore è zero
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
#my_list <- cv_results_1[!sapply(cv_results_1$c_index, is.nan) & !cv_results_1$c_index)]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index)
cv_res <- cv_results_13[complete.cases(cv_results_13), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.62
cv_res <- cv_results_123[complete.cases(cv_results_123), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.59
cv_res <- cv_results_1367[complete.cases(cv_results_1367), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.59
cv_res <- cv_results_13678[complete.cases(cv_results_13678), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.59
cv_res <- cv_results_3678[complete.cases(cv_results_3678), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.59
save.image("~/Dev/CoPLaS/CoPLaS/Risultati_selezione_omiche.RData")
# Calculate average C-index
cv_res <- cv_results_1[complete.cases(cv_results_1), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
# Calculate average C-index
cv_res <- cv_results_1[complete.cases(cv_results_1), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.600
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
cv_res <- cv_results_12[complete.cases(cv_results_12), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.62
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
cv_res <- cv_results_13[complete.cases(cv_results_13), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.59
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
cv_res <- cv_results_123[complete.cases(cv_results_123), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.612
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
cv_res <- cv_results_1367[complete.cases(cv_results_1367), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.614
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
cv_res <- cv_results_13678[complete.cases(cv_results_13678), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.63
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
cv_res <- cv_results_3678[complete.cases(cv_results_3678), ]
cv_res <- cv_res[rowSums(cv_res == 0) == 0, ]
mean_c_index <- mean(cv_res$c_index)
print(mean_c_index) #0.5959
ci <- t.test(cv_res$c_index, conf.level = 0.95)
ci$conf.int[1]
ci$conf.int[2]
