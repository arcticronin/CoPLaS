cv.out <- cv.glmnet(x[train,-1], y[train,], alpha = 0)
cv.out <- cv.glmnet(x[train], y[train,], alpha = 0)
coef.ridge.mod = ridge.mod
coef.ridge.mod = ridge.mod$lambda
lasso.mod <- glmnet(x[train,],y[train,],alpha = grid)
dim(coef(lasso.mod))
lasso.mod <- glmnet(x[train,],y[train,],alpha = grid)
lasso.mod <- glmnet(x[train,], y[train,], alpha = grid, nlambda = 100)
lasso.mod <- glmnet(x[train,], y[train,], alpha = 1, lambda = grid, nlambda = 100)
install.packages("prioritylasso")
"ciap" + " + 10"
paste("1o" "20")
paste("1o", "20")
library(glmnet)
install.packages("glmnet")
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
load("DaniDatasets/relevant_genes.RData")
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
load("DaniDatasets/relevant_genes.RData")
typeof(relevant_genes)
typeof(relevant_genes)
print(typeof(relevant_genes))
genes_df <- data.frame(Gene = relevant_genes)
write.csv(genes_df, "relevant_genes.csv", row.names = FALSE)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/DaniDatasets")
load("relevant_genes.RData")
print(typeof(relevant_genes))
genes_df <- data.frame(Gene = relevant_genes)
write.csv(genes_df, "relevant_genes.csv", row.names = FALSE)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
# Assuming you have already set your working directory and loaded the data
data <- read.csv("DaniDatasets/preprocessed.csv")
dim(data)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
# Assuming you have already set your working directory and loaded the data
data <- read.csv("DaniDatasets/preprocessed.csv")
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
# Assuming you have already set your working directory and loaded the data
data <- read.csv("DaniDatasets/preprocessed.csv")
data <- data[ -c(1) ]
dim(data)
dim(data)
dim(data)
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(step2)
model_results <- cox_lasso_model_with_offset(data)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
dim(data)
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(data)
model_results <- cox_lasso_model_with_offset(data)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
dim(data)
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the survival object
y <- with(df, Surv(time, event))
y <- with(df, Surv(time, event))
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(data)
model_results <- cox_lasso_model_with_offset(data)
View(data)
View(data)
library(survival)
library(glmnet)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
# Assuming you have already set your working directory and loaded the data
step2 <- read.csv("step2.csv")
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event", "offset")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event, or offset")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
# Example usage:
model_results <- cox_lasso_model_with_offset(step2)
head(model_results$coef)
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(data)
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
return( y )
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
y = cox_lasso_model_with_offset(data)
y
retunr ?
ret
? return
?
end
help("return")
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
return( y )
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(data)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
View(data)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(data)
head(model_results$coef)
View(model_results)
View(model_results)
write.csv(model_results$coef, "results/", row.names = TRUE)
write.csv(model_results$coef,
"results/glmnet_lasso_coeffs.csv",
row.names = TRUE)
library(survival)
library(glmnet)
library(prioritylasso)
setwd("/home/ronin/Dev/notebooks/thesis_notebook/")
data <- read.csv("DaniDatasets/preprocessed.csv")
# remove first column with patient ID
data <- data[-c(1)]
# Define the function
cox_lasso_model_with_offset <- function(df) {
# Check for necessary columns
required_cols <- c("time", "event")
if (!all(required_cols %in% names(df))) {
stop("Dataframe missing required columns: time, event")
}
# Prepare the survival object
y <- with(df, Surv(time, event))
# Prepare the matrix of predictors
predictors <- setdiff(names(df), required_cols)
x <- as.matrix(df[, predictors])
# Extract the offset
#offset_values <- df$offset
# Fit Cox model with Lasso using cross-validation
fit <- cv.glmnet(x, y, family="cox", alpha=1)
#fit <- cv.glmnet(x, y, family="cox", alpha=1, offset=offset_values)
# Best lambda and model fit
best_lambda <- fit$lambda.min
# best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda, offset=offset_values)
best_fit <- glmnet(x, y, family="cox", alpha=1, lambda=best_lambda)
# Extracting coefficients
coef_vector <- as.vector(coef(best_fit, s = best_lambda))
# handling intercept is not strictly recommended in COX, and not itnterpretable,
# so I'm leaving it out
# coef_df <- data.frame(coefficient = coef_vector, row.names = c("(Intercept)", predictors))
coef_df <- data.frame(coefficient = coef_vector, row.names = predictors)
# Return results
return(list(coef=coef_df, lambda=best_lambda, fit=best_fit))
}
model_results <- cox_lasso_model_with_offset(data)
head(model_results$coef)
write.csv(model_results$coef,
"results/glmnet_lasso_coeffs.csv",
row.names = TRUE)
View(cox_lasso_model_with_offset)
